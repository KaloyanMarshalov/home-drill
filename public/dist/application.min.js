"use strict"; var ApplicationConfiguration = function () { var e = "mean", t = ["ngResource", "ngAnimate", "ui.router", "ui.bootstrap", "ui.utils"], s = function (t) { angular.module(t, []), angular.module(e).requires.push(t) }; return { applicationModuleName: e, applicationModuleVendorDependencies: t, registerModule: s } }(); angular.module(ApplicationConfiguration.applicationModuleName, ApplicationConfiguration.applicationModuleVendorDependencies), angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider", function (e) { e.hashPrefix("!") }]), angular.element(document).ready(function () { "#_=_" === window.location.hash && (window.location.hash = "#!"), angular.bootstrap(document, [ApplicationConfiguration.applicationModuleName]) }), ApplicationConfiguration.registerModule("core"), ApplicationConfiguration.registerModule("exercises"), ApplicationConfiguration.registerModule("users"), ApplicationConfiguration.registerModule("workouts"), angular.module("core").config(["$stateProvider", "$urlRouterProvider", function (e, t) { t.otherwise("/"), e.state("home", { url: "/", templateUrl: "modules/core/views/home.client.view.html" }) }]), angular.module("core").controller("HeaderController", ["$scope", "Authentication", "Menus", function (e, t, s) { e.authentication = t, e.isCollapsed = !1, e.menu = s.getMenu("topbar"), e.toggleCollapsibleMenu = function () { e.isCollapsed = !e.isCollapsed }, e.$on("$stateChangeSuccess", function () { e.isCollapsed = !1 }) }]), angular.module("core").controller("HomeController", ["$scope", "Authentication", function (e, t) { e.authentication = t }]), angular.module("core").service("Menus", [function () { this.defaultRoles = ["user"], this.menus = {}; var e = function (e) { if (!e) return this.isPublic; for (var t in e.roles) for (var s in this.roles) if (this.roles[s] === e.roles[t]) return !0; return !1 }; this.validateMenuExistance = function (e) { if (e && e.length) { if (this.menus[e]) return !0; throw new Error("Menu does not exists") } throw new Error("MenuId was not provided") }, this.getMenu = function (e) { return this.validateMenuExistance(e), this.menus[e] }, this.addMenu = function (t, s, i) { return this.menus[t] = { isPublic: s || !1, roles: i || this.defaultRoles, items: [], shouldRender: e }, this.menus[t] }, this.removeMenu = function (e) { this.validateMenuExistance(e), delete this.menus[e] }, this.addMenuItem = function (t, s, i, o, r, n, u) { return this.validateMenuExistance(t), this.menus[t].items.push({ title: s, link: i, menuItemType: o || "item", menuItemClass: o, uiRoute: r || "/" + i, isPublic: n || this.menus[t].isPublic, roles: u || this.defaultRoles, items: [], shouldRender: e }), this.menus[t] }, this.addSubMenuItem = function (t, s, i, o, r, n, u) { this.validateMenuExistance(t); for (var a in this.menus[t].items) this.menus[t].items[a].link === s && this.menus[t].items[a].items.push({ title: i, link: o, uiRoute: r || "/" + o, isPublic: n || this.menus[t].isPublic, roles: u || this.defaultRoles, shouldRender: e }); return this.menus[t] }, this.removeMenuItem = function (e, t) { this.validateMenuExistance(e); for (var s in this.menus[e].items) this.menus[e].items[s].link === t && this.menus[e].items.splice(s, 1); return this.menus[e] }, this.removeSubMenuItem = function (e, t) { this.validateMenuExistance(e); for (var s in this.menus[e].items) for (var i in this.menus[e].items[s].items) this.menus[e].items[s].items[i].link === t && this.menus[e].items[s].items.splice(i, 1); return this.menus[e] }, this.addMenu("topbar") }]), angular.module("exercises").config(["$stateProvider", function (e) { e.state("listExercises", { url: "/exercises", templateUrl: "modules/exercises/views/list-exercises.client.view.html" }).state("createExercise", { url: "/exercises/create", templateUrl: "modules/exercises/views/create-exercise.client.view.html" }).state("viewExercise", { url: "/exercises/:exerciseId", templateUrl: "modules/exercises/views/view-exercise.client.view.html" }).state("editExercise", { url: "/exercises/:exerciseId/edit", templateUrl: "modules/exercises/views/edit-exercise.client.view.html" }) }]), angular.module("exercises").controller("ExercisesController", ["$scope", "$stateParams", "$location", "Authentication", "Exercises", function (e, t, s, i, o) { e.authentication = i, e.create = function () { var t = new o({ name: this.name, type: this.type, difficulty: this.difficulty, muscleGroup: this.muscleGroup, equipment: this.equipment, picture: this.picture, youTube: this.youTube }); this.equipment || (t.equipment = "None"), t.$save(function (e) { s.path("exercise/" + e._id) }, function (t) { e.error = t.data.message }) }, e.remove = function (t) { if (t) { t.$remove(); for (var i in e.exercises) e.exercises[i] === t && e.exercises.splice(i, 1) } else e.exercise.$remove(function () { s.path("exercises") }) }, e.update = function () { var t = e.exercise; this.equipment || (t.equipment = "None"), t.$update(function () { s.path("exercises/" + t._id) }, function (t) { e.error = t.data.message }) }, e.find = function () { e.exercises = o.query() }, e.findOne = function () { e.exercise = o.get({ exerciseId: t.exerciseId }) }, e.range = function () { for (var t = [], s = 0; s < e.exercises.length; s++) s % 4 === 0 && t.push(s); return t }, e.addToWorkout = function () { var t = sessionStorage.length; sessionStorage.setItem("exercise" + t, e.exercise._id), e.successfulAdding = !e.successfulAdding } }]).filter("displayMuscles", function () { return function (e) { var t = ""; return t = e.join(", ") } }), angular.module("exercises").factory("Exercises", ["$resource", function (e) { return e("exercises/:exerciseId", { exerciseId: "@_id" }, { update: { method: "PUT" } }) }]), angular.module("users").config(["$httpProvider", function (e) { e.interceptors.push(["$q", "$location", "Authentication", function (e, t, s) { return { responseError: function (i) { switch (i.status) { case 401: s.user = null, t.path("signin"); break; case 403: } return e.reject(i) } } }]) }]), angular.module("users").config(["$stateProvider", function (e) { e.state("profile", { url: "/settings/profile", templateUrl: "modules/users/views/settings/edit-profile.client.view.html" }).state("password", { url: "/settings/password", templateUrl: "modules/users/views/settings/change-password.client.view.html" }).state("accounts", { url: "/settings/accounts", templateUrl: "modules/users/views/settings/social-accounts.client.view.html" }).state("signup", { url: "/signup", templateUrl: "modules/users/views/signup.client.view.html" }).state("signin", { url: "/signin", templateUrl: "modules/users/views/signin.client.view.html" }) }]), angular.module("users").controller("AuthenticationController", ["$scope", "$http", "$location", "Authentication", function (e, t, s, i) { e.authentication = i, e.authentication.user && s.path("/"), e.signup = function () { t.post("/auth/signup", e.credentials).success(function (t) { e.authentication.user = t, s.path("/") }).error(function (t) { e.error = t.message }) }, e.signin = function () { t.post("/auth/signin", e.credentials).success(function (t) { e.authentication.user = t, s.path("/") }).error(function (t) { e.error = t.message }) } }]), angular.module("users").controller("SettingsController", ["$scope", "$http", "$location", "Users", "Authentication", function (e, t, s, i, o) { e.user = o.user, e.user || s.path("/"), e.hasConnectedAdditionalSocialAccounts = function () { for (var t in e.user.additionalProvidersData) return !0; return !1 }, e.isConnectedSocialAccount = function (t) { return e.user.provider === t || e.user.additionalProvidersData && e.user.additionalProvidersData[t] }, e.removeUserSocialAccount = function (s) { e.success = e.error = null, t.delete("/users/accounts", { params: { provider: s } }).success(function (t) { e.success = !0, e.user = o.user = t }).error(function (t) { e.error = t.message }) }, e.updateUserProfile = function () { e.success = e.error = null; var t = new i(e.user); t.$update(function (t) { e.success = !0, o.user = t }, function (t) { e.error = t.data.message }) }, e.changeUserPassword = function () { e.success = e.error = null, t.post("/users/password", e.passwordDetails).success(function () { e.success = !0, e.passwordDetails = null }).error(function (t) { e.error = t.message }) } }]), angular.module("users").factory("Authentication", [function () { var e = this; return e._data = { user: window.user }, e._data }]), angular.module("users").factory("Users", ["$resource", function (e) { return e("users", {}, { update: { method: "PUT" } }) }]), angular.module("workouts").config(["$stateProvider", function (e) { e.state("listWorkouts", { url: "/workouts", templateUrl: "modules/workouts/views/list-workouts.client.view.html" }).state("createWorkout", { url: "/workouts/create", templateUrl: "modules/workouts/views/create-workout.client.view.html" }).state("viewWorkout", { url: "/workouts/:workoutId", templateUrl: "modules/workouts/views/view-workout.client.view.html" }).state("editWorkout", { url: "/workouts/:workoutId/edit", templateUrl: "modules/workouts/views/edit-workout.client.view.html" }).state("executeWorkout", { url: "/workouts/:workoutId/execute", templateUrl: "modules/workouts/views/execute-workout.client.view.html" }) }]), angular.module("workouts").controller("WorkoutsController", ["$scope", "$stateParams", "$location", "Authentication", "Workouts", "Exercises", function (e, t, s, i, o, r) { e.authentication = i; var n = [], u = 0, a = []; for (var c in sessionStorage) { var l = r.get({ exerciseId: sessionStorage.getItem(c) }); n.push(l) } console.log(n), e.currStorageEx = n[u], e.showTimer = function () { e.durationSelected = !0 }, e.create = function () { if (u === sessionStorage.length) { var t = new o({ name: this.workoutName, exercises: a }); console.log(t), t.$save(function (e) { s.path("workout/" + e._id) }, function (t) { e.error = t.data.message }), sessionStorage.clear(), u = 0 } else a.push({ name: e.currStorageEx.name, picture: e.currStorageEx.picture, type: this.type, time: this.time }), u += 1, e.currStorageEx = n[u], console.log(u); console.log(a) }, e.remove = function (t) { if (t) { t.$remove(); for (var i in e.workouts) e.workouts[i] === t && e.workouts.splice(i, 1) } else e.workout.$remove(function () { s.path("workouts") }) }, e.update = function () { var t = e.workout; t.$update(function () { s.path("workouts/" + t._id) }, function (t) { e.error = t.data.message }) }, e.find = function () { e.workouts = o.query(), console.log(e.workouts) }, e.findOne = function () { e.workout = o.get({ workoutId: t.workoutId }) }, e.execute = function () { e.time, e.workoutPart } }]), angular.module("workouts").factory("Workouts", ["$resource", function (e) { return e("workouts/:workoutId", { workoutId: "@_id" }, { update: { method: "PUT" } }) }]);